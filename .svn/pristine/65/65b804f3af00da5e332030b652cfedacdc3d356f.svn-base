<template>
  <div class="entry-forget">
    <div class="header">
      <div class="logo"><a></a></div>
      <div class="list font-14 gray">
        <span>已有账号，<router-link to="/login" class="red">去登录</router-link></span>
        <span>|</span>
        <router-link to="/index" class="gray">返回首页</router-link>
      </div>
    </div>
    <div class="content">
      <el-card class="forget">
        <div class="text">找回密码</div>
        <div class="form">
          <el-form :model="ruleForm" :rules="forgetRules" ref="ruleForm"  label-width="100px" class="demo-ruleForm">
            <el-form-item prop="mobile" >
              <el-input type="text" v-model="ruleForm.mobile" placeholder="请输入手机号"  ></el-input>
            </el-form-item>
            <slide-verify @getVerify="getVerify" :verifyVal='verifyVal'></slide-verify>
            <el-form-item class="code" prop="smsVerifyCode">
              <el-input class="inputCode" v-model="ruleForm.smsVerifyCode" placeholder="请输入验证码"  ></el-input>
              <el-button class="getCode" :disabled='isDisabled' @click="sendCode">{{buttonText}}</el-button >
            </el-form-item>
            <el-form-item class="password" prop="password">
              <el-input :type="passType" v-model="ruleForm.password" placeholder="密码(6-20位)" ></el-input>
              <div class="closeeyes"><img @mousedown="showPassword" @mouseleave="closePassword" src="@/assets/images/closeEyes.png" alt=""></div>
            </el-form-item>
            <el-form-item class="checkPass" prop="checkPass">
              <el-input class="password" :type="checkPasstype" v-model="ruleForm.checkPass" placeholder="请再次输入密码" ></el-input>
              <div class="closeeyes"><img @mousedown="showPassword2" @mouseleave="closePassword2" src="@/assets/images/closeEyes.png" alt=""></div>
            </el-form-item>

            <el-form-item class="forgetButton">
              <el-button type="danger" class="button" @click="confirmChange" :disabled="IsFordisable">确认修改</el-button>
            </el-form-item>
          </el-form>
        </div>
      </el-card>
    </div>

    <div class="footer">
      <div class="copyright font-12 gray">
        <p>Copyright(©)2017上海青矩互联网科技有限公司 版权所有</p>
        <p>沪ICP备16015426号-1</p>
      </div>
    </div>
  </div>
</template>

<script>
import { validatorMobile, validatorPass, validatorCode } from '@/assets/js/validator.js'
import slideVerify from '@/components/slideVerify'
import api from '@/fetch'
export default {
  name: 'ForgetPassword',
  components: {
    slideVerify
  },
  data () {
    const validateMobile = (rule, value, callback) => {
      if (!value) {
        return callback(new Error('手机号不能为空 '))
      } else {
        if (validatorMobile(value)) {
          callback()
          return true
        } else {
          callback(new Error('请输入正确的手机号'))
          return false
        }
      }
    }
    const validatePass = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请输入密码'))
      } else {
        if (validatorPass(value)) {
          callback()
          return true
        } else {
          callback(new Error('请输入6-20位字母数字混合密码'))
          return false
        }
      }
    }
    const validateCheckPass = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请再次输入密码'))
      } else {
        if (value === this.ruleForm.password) {
          callback()
          return true
        } else {
          callback(new Error('两次输入密码不一致!'))
          return false
        }
      }
    }
    const validateCode = (rule, value, callback) => {
      if (!value) {
        return callback(new Error('验证码不能为空'))
      } else {
        if (validatorCode(value)) {
          callback()
          return true
        } else {
          callback(new Error('请输入正确的验证码'))
          return false
        }
      }
    }
    return {
      ruleForm: {
        mobile: null,
        smsVerifyCode: null, // 短信验证码
        password: null,
        checkPass: null,
        slideVerify: false // 滑块验证
      },
      verifyVal: {
        width: 360,
        height: 30
      },
      buttonText: '获取验证码',
      isDisabled: false,
      flag: true,
      passType: 'password',
      checkPasstype: 'password',
      IsFordisable: true,
      // 表单验证
      forgetRules: {
        mobile: [{ required: true, validator: validateMobile }],
        password: [{ required: true, validator: validatePass }],
        checkPass: [{ required: true, validator: validateCheckPass, trigger: 'blur' }],
        smsVerifyCode: [{ required: true, validator: validateCode }]
      }
    }
  },
  methods: {
    // 显示密码
    showPassword () {
      this.passType = 'text'
    },
    showPassword2 () {
      this.checkPasstype = 'text'
    },
    // 隐藏密码
    closePassword () {
      this.passType = 'password'
    },
    closePassword2 () {
      this.checkPasstype = 'password'
    },
    // 滑块验证
    getVerify (resVerify) {
      this.ruleForm.slideVerify = resVerify
    },
    // 获取验证码
    async sendCode () {
      try {
        const res = await api.getSmsCode({ mobile: this.ruleForm.mobile })
        if (res.code === 200) {
          let time = 6
          this.buttonText = '发送验证码'
          this.isDisabled = true
          if (this.flag) {
            this.flag = false
            const timer = setInterval(() => {
              time--
              this.buttonText = `发送中${time}秒`
              if (time === 0) {
                clearInterval(timer)
                this.buttonText = '获取验证码'
                this.isDisabled = false
                this.flag = true
              }
            }, 1000)
          }
        }
      } catch (error) {
        this.$message({
          message: '短信验证码已经发送成功，请注意查收，如未收到，请5分钟后重试',
          type: 'warning'
        })
      }
    },
    confirmChange () {
      this.$refs.ruleForm.validate(async isOk => {
        if (isOk) {
          const res = await api.forgetPwd(this.ruleForm)
          this.$message({
            message: '密码修改成功，请重新登录',
            type: 'success'
          })
          this.$router.push('/login')
        }
      })
    }
  },
  watch: {
    ruleForm: {
      handler (newVal, oldVal) {
        var vals = validatorMobile(this.ruleForm.mobile) && validatorPass(this.ruleForm.password) &&
         validatorPass(this.ruleForm.checkPass) && validatorCode(this.ruleForm.smsVerifyCode) && this.ruleForm.slideVerify
        if (vals) {
          this.IsFordisable = false
        } else {
          this.IsFordisable = true
        }
      },
      deep: true,
      immediate: true
    }
  }
}
</script>

<style lang="less" scoped>
  .entry-forget {
    width: 1100px;
    .header {
      height: 50px;
      margin:100px 0 10px 0;
      display: flex;
      justify-content: space-between;
      align-items: flex-end;
      .logo{
        width:214px;
        height: 100%;
        background-color: #f00;
      }
      .list{
        :nth-child(2){
          padding: 0 20px;
        }
      }
    }
    .content {
      height: 600px;
      background-color: #fff;
      .forget {
        width: 360px;
        height: 550px;
        margin: 0 auto;
        padding-top: 50px;
        box-shadow: none;
        border: none;
        .text {
          text-align: center;
          margin-bottom: 50px;
          font-size: 16px;
          font-weight: 800;
        }
        .code{
          /deep/.el-button{
            border:none;
            outline:none;
            padding:0;
            width:auto;
            span{
              font-size: 14px;
            }
          }
          .inputCode{
            position: relative;
          }
          .getCode{
            // color:#666;
            position: absolute;
            top: 15px;
            right: 20px;
          }
        }
        .forgetButton {
          margin-top: 60px;
        }
      }
    }
    .footer {
      margin:20px 0;
      .copyright {
        p{
          text-align: center;
          &:nth-child(2){
            padding-top:5px;
          }
        }
      }
    }

  }
</style>
