<template>
  <div class="courseOrder">
    <div class="remind">提示: 上下拖动可改变课成顺序</div>
    <div class="tableData">
      <el-table ref="dragTable" style="width: 100%;" height="calc(100vh - 350px)" :data="newArr" row-key="id">
        <el-table-column label="操作" align="center" width="120px">
          <template slot-scope="scope">
            <img src="@/assets/images/yidong.png" alt draggable="true" @dragstart="handleEdit(scope.row)" />
          </template>
        </el-table-column>
        <el-table-column label="提交/保存时间" prop="createTime" width="220px"></el-table-column>
        <el-table-column label="课程名称" prop="name" width="240px"></el-table-column>
        <el-table-column label="课程类型" prop="type" width="120px"></el-table-column>
        <el-table-column label="审核状态" prop="status" width="180px"></el-table-column>
        <el-table-column label="审核时间" prop="auditTime" width="220px"></el-table-column>
      </el-table>
    </div>
  </div>
</template>

<script>
import Sortable from 'sortablejs'
export default {
  props: {
    tableData: Array,
    showCourseOrder: Boolean
  },
  data() {
    return {
      newArr: []
    }
  },
  watch: {
    showCourseOrder: {
      handler: function(val) {
        if (val) {
          this.newArr = JSON.parse(JSON.stringify(this.tableData))
        }
      },
      immediate: true
    }
  },
  methods: {
    setSort() {
      const el = this.$refs.dragTable.$el.querySelectorAll('.el-table__body-wrapper > table > tbody')[0]
      this.sortable = Sortable.create(el, {
        ghostClass: 'sortable-ghost',
        setData: function(dataTransfer) {
          dataTransfer.setData('Text', '')
        },
        onEnd: evt => {
          const targetRow = this.newArr.splice(evt.oldIndex, 1)[0]
          this.newArr.splice(evt.newIndex, 0, targetRow)
        }
      })
    }
  },
  mounted() {
    this.setSort()
  }
}
</script>

<style lang="less" scoped>
.courseOrder {
  .remind {
    color: #e23732;
    font-size: 12px;
    padding: 20px 0 10px 20px;
  }
}
</style>
