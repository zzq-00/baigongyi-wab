<template>
  <div class="idea-com">
    <VueEmoji ref="emoji" width="100%" :height="VueEmojiHeight" @input="onInput" />
    <div class="idea-publish">
      <div class="emoji-img">
        <span class="red span-emoji">
          Ë°®ÊÉÖ
        </span>
        <el-popover placement="bottom" trigger="manual" v-model="uploadImgVisible">
          <ul class="img-list">
            <li v-for="(item,index) in imageList" :key="index">
              <el-image style="width: 100%; height: 100%" :src="$store.state.imageDomain + item.url" :preview-src-list="srcList">
              </el-image>
              <i class="el-icon-close" @click="delCurrent(item.url)"></i>
            </li>
            <li v-if="showAddIcon">
              <div class="el-icon-plus add-img" @click="$refs['file-input'].click()"></div>
            </li>
          </ul>
          <span class="red span-img" @click="showUpload" slot="reference">ÂõæÁâá</span>
        </el-popover>
      </div>
      <el-button type="primary" @click="ideaAdd">Âèë Â∏É</el-button>
      <input type="file" ref="file-input" accept="image/*" id="img-upload" @change="uploadFile" v-show="false">
    </div>
  </div>
</template>

<script>
import VueEmoji from 'emoji-vue'
import uploadImg from '@/mixins/uploadImg.js'
import api from '@/fetch'

export default {
  props: {
    VueEmojiHeight: {
      default: 108
    }
  },
  components: {
    VueEmoji
  },
  data() {
    return {
      uploadImgVisible: false,
      ideaText: '',
      imageUrl: '',
      imageList: []
    }
  },
  watch: {
    imageUrl: function(val) {
      let imgObj = { objType: 10, previewUrl: val, url: val }
      this.imageList.push(imgObj)
    },
    imageList: function() {
      this.uploadImgVisible = !!this.imageList.length
    }
  },
  computed: {
    showAddIcon: function() {
      return this.imageList.length < 9
    },
    srcList: function() {
      return this.imageList.map(item => this.$store.state.imageDomain + item.url)
    }
  },
  mixins: [uploadImg],
  methods: {
    onInput(event) {
      this.ideaText = event.data
    },
    clearTextarea() {
      this.$refs.emoji.clear()
    },
    showUpload() {
      if (!this.uploadImgVisible && this.showAddIcon) return this.$refs['file-input'].click()
      this.uploadImgVisible = !this.uploadImgVisible
    },
    delCurrent(obj) {
      let index = this.imageList.findIndex(item => item.url === obj.url)
      this.imageList.splice(index, 1)
    },
    ideaAdd() {
      api.ideaAdd({ content: this.ideaText, ideaImgs: this.imageList }).then(res => {
        this.$emit('publishFinish')
      })
    }
  },
  mounted() {
    document.getElementsByClassName('emoji-vue-textarea')[0].setAttribute('placeholder', 'ËØ¥Âá∫‰Ω†ÁöÑÊÉ≥Ê≥ï...')
    document.getElementsByClassName('emoji-vue-textarea')[0].setAttribute('maxLength', 1000)
  }
}
</script>

<style lang="less" scoped>
.idea-com {
  .idea-publish {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: 20px;
    .emoji-img {
      .red {
        padding-left: 21px;
        margin-right: 30px;
        position: relative;
        &.span-emoji {
          background: url(~@/assets/images/biaoqing.png) no-repeat left/16px auto;
        }
        &.span-img {
          background: url(~@/assets/images/tupian.png) no-repeat left/16px auto;
        }
        &:focus {
          outline: none;
        }
      }
    }
  }
  /deep/ .emoji-picker-container {
    width: 100% !important;
  }
  /deep/ .emoji-wysiwyg-editor {
    padding-right: 6px;
    background-color: #f6f6f7;
    box-sizing: border-box;
    border: 0 none;
    border-radius: 5px;
    &:focus {
      outline: none;
    }
  }
  /* ÊääÂéüÁâàÁöÑemojiÊ†∑ÂºèÈöêËóèÂú®‰∏ãÈù¢üòÇ */
  /deep/ .emoji-picker-icon {
    top: initial;
    bottom: -48px;
    left: 0;
    width: 50px;
    opacity: 0;
  }
}
.img-list {
  max-width: 258px;
  overflow: hidden;
  > li {
    float: left;
    width: 80px;
    height: 80px;
    padding: 3px 3px;
    position: relative;
    .add-img {
      width: 76px;
      height: 76px;
      line-height: 76px;
      text-align: center;
      color: #ccc;
      border: 2px dashed #ddd;
      font-size: 22px;
      font-weight: bold;
    }
    .el-icon-close {
      cursor: pointer;
      display: none;
      color: #000;
      position: absolute;
      right: 3px;
      top: 3px;
      font-size: 20px;
      background-color: rgba(255, 255, 255, 0.6);
    }
    &:hover {
      .el-icon-close {
        display: block;
      }
    }
  }
}
</style>
