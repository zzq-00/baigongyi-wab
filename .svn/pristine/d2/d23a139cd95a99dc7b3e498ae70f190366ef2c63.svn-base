<!--创建课程-->
<template>
  <div class="creatCourse">
    <div class="header">
      <div class="title">创建课程</div>
      <el-form ref="form" :model="form" :rules="rules" label-width="80px" label-position="top" :inline='true' size="small">
        <div class="content">
          <div class="left">
            <el-form-item label="课程主页图" required>
              <div class="ask">可上传jpg/jpeg/png/bmp格式图片，建议分辨率为900*506，最大4M</div>
              <el-upload class="avatar-uploader"
                action="#"
                :headers="headers"
                :http-request="onUpload"
                :on-success="handleAvatarSuccess"
                :show-file-list="false"
                name="image">
                <img v-if="form.image" :src="form.image" style="width:200px">
                <i v-else class="el-icon-plus avatar-uploader-icon"></i>
                <el-button type="danger">点击上传</el-button>
              </el-upload>
            </el-form-item>
          </div>
          <div class="right">
            <el-row :gutter="20">
              <el-col :span="24">
                <el-form-item label="发布课程角色" required>
                  <el-select placeholder="讲师" disabled v-model="form.accountIdentity">
                    <el-option value="讲师"></el-option>
                  </el-select>
                </el-form-item>
              </el-col>
            </el-row>
            <el-row :gutter="20">
              <el-col :span="24">
                <el-form-item label="课程名称" required>
                  <el-input v-model="form.name" class="columnName" maxlength="30" show-word-limit></el-input>
                </el-form-item>
              </el-col>
            </el-row>
            <el-form-item label="课程价格(元)" required>
              <el-input v-model="form.price"></el-input>
            </el-form-item>

            <el-form-item label="选择课程类型" required class="coursetype">
              <el-select v-model="form.type">
                <el-option value="1" label="音频"></el-option>
                <el-option value="2" label="视频"></el-option>
              </el-select>
            </el-form-item>

            <el-row :gutter="20">
              <el-col :span="24">
                <el-form-item label="选择视频文件" v-model="form.url" required>
                  <div class="recommed">建议上传视频大小不超过2g，视频类型为：'FLV','MOV','MP4'</div>
                  <upload-video @getVideoUrl="getVideoUrl"></upload-video>
                  <!-- <el-upload
                      class="upload-demo"
                      action="#"
                      :headers="headers"
                      :http-request="onUploadvideo"
                      :before-remove="beforeRemove"
                      :on-success="handleAvatarSuccess"
                      :limit="1"
                      :on-exceed="handleExceed"
                      :file-list="fileList"
                      name='url'>
                      <el-button size="small" type="danger" @click="form.url ? 'againUpload' : ''">{{form.url ? '重新上传' : '上传视频'}}</el-button>
                    </el-upload> -->

                  <!-- <div>{{urlName}}</div>
                  <input ref="file" hidden type="file" @change="onUploadvideo" />
                  <el-button size="small" type="danger" @click="clickUpload">{{form.url ? '重新上传' : '上传视频'}}</el-button> -->
                </el-form-item>
              </el-col>
            </el-row>

            <el-row :gutter="20">
              <el-col :span="24">
                <el-form-item label="专栏标签" required>
                  <div v-for="(item,i) of items" :key="i" class="addTag">
                    <el-select placeholder="请选择一级标签" class="tag1" v-model="items[i].tag1">
                      <el-option v-for="tag in tags" :key="tag.id" :label="tag.tagName" :value="tag.id"></el-option>
                    </el-select>
                    <el-select placeholder="请选择二级标签" class="tag2" v-model="items[i].tag2">
                      <el-option v-for="tag in tagsTwo" :key="tag.id" :label="tag.tagName" :value="tag.id"></el-option>
                    </el-select>
                    <!-- <img src="@/assets/images/delete.png" v-show="items.length>1" @click.prevent="onReduce(items[i])">
                      <img src="@/assets/images/add.png"
                        @click.prevent="onAdd"  class="onAdd"> -->
                    <i class="el-icon-circle-plus-outline" @click.prevent="onAdd"></i>
                    <i class="el-icon-circle-close"  @click.prevent="onReduce(items[i])" v-show="items.length>1" style='color:#E23732;'></i>
                  </div>
                </el-form-item>
              </el-col>
            </el-row>

            <el-form-item label="课程内容" required>
              <quill-editor ref="myQuillEditor" v-model="form.description">
              </quill-editor>
            </el-form-item>

            <el-form-item class="button">
              <el-button @click="preview">预览</el-button>
              <el-button @click="saveSraft">存为草稿</el-button>
              <el-button type="danger" @click="onSubmit">提交审核</el-button>
            </el-form-item>
          </div>
        </div>
      </el-form>

    </div>
  </div>
</template>

<script>
import 'quill/dist/quill.core.css'
import 'quill/dist/quill.snow.css'
import 'quill/dist/quill.bubble.css'

import { quillEditor } from 'vue-quill-editor'
import api from '@/fetch'
import UploadVideo from '@/utils/upLoadVideo'
export default {
  name: 'creatCourse',
  components: {
    quillEditor,
    UploadVideo
  },
  data () {
    return {
      rules: {
        image: [{ required: true, message: '必填项不能为空', trigger: 'blur' }],
        accountIdentity: [{ required: true, message: '必填项不能为空', trigger: 'blur' }],
        name: [{ required: true, message: '必填项不能为空', trigger: 'blur' }],
        price: [{ required: true, message: '必填项不能为空', trigger: 'blur' }],
        upToTime: [{ required: true, message: '必填项不能为空', trigger: 'blur' }],
        tagIds: [{ required: true, message: '必填项不能为空', trigger: 'blur' }],
        description: [{ required: true, message: '必填项不能为空', trigger: 'blur' }]
      },
      items: [{ tag1: '', tag2: '' }],
      headers: {
        Authorization: JSON.parse(window.localStorage.getItem('user')).token
      },
      form: {
        image: '',
        accountIdentity: '讲师', // 发布者身份
        name: '',
        price: '',
        type: '', // 类型--音频视频
        url: '', // 音频视频地址
        id: '',
        tagIds: [],
        description: ''
      },
      imgData: {
        accept: 'image/jpg, image/jpeg, image/png, imgagebmp'
      },
      videoData: {
        accept: 'video/FLV video/MOV, video/MP4,video/MP3'
      },
      fileList: [],
      tagParams: {
        asc: true,
        orderBy: 'id',
        pageNum: 1,
        pageSize: 10,
        paramObject: {}
      },
      tags: [],
      tagsTwo: []
    }
  },
  watch: {
  },
  methods: {
    onAdd () {
      this.items.push({ tag1: '', tag2: '' })
    },
    onReduce (i) {
      if (confirm('确定要删除吗？')) {
        this.items.splice(i, 1)
      }
    },
    // 上传封面图，
    onUpload (config) {
      const reader = new FileReader()
      const img1 = config.file
      console.log(img1.type, img1.size)
      const type = img1.type
      const size = img1.size
      if (this.imgData.accept.indexOf(type) === -1) {
        return false
      }
      if (size > 4194304) {
        return false
      }
      reader.readAsDataURL(config.file)
      var that = this
      reader.onload = function (e) {
        that.form.image = e.target.result
      }
    },
    handleAvatarSuccess () {
      // 上传成功
    },
    // 上传视频
    handleExceed (files, fileList) {
      this.$message.warning('当前限制选择 1 个文件,先删除上一个文件重新上传')
    },
    beforeRemove (file, fileList) {
      // console.log('11', file)
      // return this.$confirm(`确定移除 ${file.name}？`)
      this.form.url = ''
      return file.name
    },
    getVideoUrl (videoUrl) {
      this.form.url = videoUrl
    },
    // 标签
    async getTaglist1 () {
      this.tags = []
      this.tagsTwo = []
      const res = await api.tagList(this.tagParams)
      res.data.records.forEach((item, index) => {
        if (item.parentId) { // 有id的为二级数据
          this.tagsTwo.push(item)
        } else { // 没有id的为一级数据
          this.tags.push(item)
        }
      })
    },

    // 预览
    preview () {
      this.$store.commit('previewCourse', this.form)
      this.$router.push('/previewCourse')
    },
    // 存为草稿
    async saveSraft () {
      const tagArr = []
      this.items.forEach((item, index) => {
        for (var i in item) {
          tagArr.push(item[i])
        }
      })
      this.form.tagId = tagArr.join(',')
      const res = await api.saveCourse(this.form)
      console.log(res)
      this.$router.push('/myLecture')
    },
    // 提交审核
    async onSubmit () {
      const tagArr = []
      this.items.forEach((item, index) => {
        for (var i in item) {
          tagArr.push(item[i])
        }
      })
      this.form.tagId = tagArr.join(',')
      const res = await api.publishCourse(this.form)
      console.log(res)
      this.$router.push('/myLecture')
    }

  },
  created () {
    this.getTaglist1()
  }
}
</script>

<style lang="less" scope>
.creatCourse {
  margin-top: 20px;
  .header {
    width: 1100px;
    background-color: #fff;
    border-radius: 10px;
    .title {
      height: 50px;
      line-height: 50px;
      padding-left: 20px;
      border-bottom: 1px solid #ddd;
      box-sizing: border-box;
    }
  }
  .content {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    .left {
      padding: 20px 20px 0 10px;
      .ask {
        font-size: 12px;
        color: #ccc;
        line-height: 18px;
      }
    }
    .right {
      padding-left: 20px;
      border-left: 1px solid #ddd;
    }
  }
  .el-form {
    margin-left: 20px;
    .el-form-item {
      margin-bottom: 18px;
      .el-form-item__content {
        .el-input {
          width: auto;
          width: 260px;
        }
        .columnName {
          width: 560px;
        }
        .tag1+.tag2 {
          margin-left: 40px;
        }
        .recommed {
          font-size: 12px;
          color: #ccc;
          margin-top: -30px;
          margin-left: 100px;
        }
      }
      .addTag {
        margin-bottom: 22px; // position: relative;
        // img {
        //   margin-left: 10px;
        // }
        i{
          font-size: 16px;
          padding-left:10px;
        }
      }
    }
    .update {
      margin-left: 28px;
    }
    .button {
      margin-left: 230px;
      .el-button {
        width: 90px;
        height: 34px;
      }
    }
    .coursetype {
      margin-left: 24px;
      .el-input {
        width: 120px;
      }
    }
  }
  .el-form--label-top {
    .el-form-item__label {
      padding: 0px!important;
      line-height: 30px!important;
    }
  }
  .avatar-uploader {
    position: relative;
    width: 200px;
    height: 200px;
    border: 1px dashed #ccc; // margin-right:30px;
    font-size: 28px;
    float: left;
    display: flex;
    justify-content: center;
    align-items: center;
    .el-button {
      position: absolute;
      bottom: -40px;
      left: 0;
      width: 100%;
    }
  }
}
</style>
